@model List<parkSmartly.Data.Model.Search>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutDetailed.cshtml";
}

<style type="text/css">
    #map-canvas {
        height: 500px;
        width: 100% margin: 0;
        padding: 0;
    }
</style>



<section class="content-block contact-2">
    <div class="container">
        <div class="row" style="display:none;">
            <div class="col-lg-12">

                <form class="form-horizontal">
                    <div class="form-group has-feedback">
                        <div class="col-lg-10 col-lg-offset-1" style="vertical-align:bottom;">
                            <div class="form-group">
                                <input type="text" class="form-control" id="txtAddress" placeholder="Enter address">
                                <select id="drpRadius" class="form-control">
                                    <option value="1">Search within 1 km radius</option>
                                    <option value="2">Search within 2 km radius</option>
                                    <option value="3">Search within 3 km radius</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-lg-3 col-lg-offset-4">
                            <button type="button" class="btn btn-primary" id="btnSearch">
                                Find Parking Space
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <h3>Heat Map of car parking searches</h3>

                <div id="map-canvas">

                </div>

            </div>

        </div><!-- /.row -->
    </div><!-- /.container -->

</section>

@functions{

    public string GetFunctions()
    {
        var func = string.Empty;
        foreach (parkSmartly.Data.Model.Search search in Model)
        {
            func += "getGeoCode" + search.Id + "(),";
        }
        return func.Substring(0, func.Length -1);
    }
}

@section Scripts {
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script src="https://maps.googleapis.com/maps/api/js?signed_in=true&libraries=places,visualization&callback=initAutocomplete"
        async defer></script>


    <script type="text/javascript">

    $("#btnSearch").click(function () {
        if (!/^\s*$/.test($("#txtAddress").val())) {
            var link = $("#registerLink").attr("href");
            $.ajax({
                url: '@Url.Action("Search", "SearchSpace")',
                data: { Address: $("#txtAddress").val(), Radius: $("#drpRadius").val() },
                dataType: 'json',
                method: 'POST',
                success: function (result) {
                    link = link + "?search=" + result.id;
                    $("#registerLink").attr("href", link);
                    if (result.isAuthenticated) {
                        $("#errorAuthenticated").slideDown("slow");
                    }
                    else {
                        $("#tempError").slideDown("slow");
                    }
                },
                error: function (xhr, error, errorThrown) {
                }
            });
        }
    });

    var map = null;
    var heatmap = null;

    function initialize() {
        var mapOptions = {
            center: { lat: -36.8436, lng: 174.7669182 },
            zoom: 13
        };
        map = new google.maps.Map(document.getElementById('map-canvas'),
            mapOptions);

        var myLatlng = new google.maps.LatLng(-36.8436, 174.7669182);

        //heatmap = new google.maps.visualization.HeatmapLayer({
        //    data: getPoints(),
        //    map: map
        //});
        getPoints();
    }
    google.maps.event.addDomListener(window, 'load', initialize);

    var points = [];

    @*@foreach (parkSmartly.Data.Model.Search search in Model)
        {
                @Html.Raw("function getGeoCode" + search.Id + "(){ \n")
                @Html.Raw("var dfd = jQuery.Deferred(); \n");
                @Html.Raw("var geocoder = new google.maps.Geocoder(); \n");
                @Html.Raw("geocoder.geocode({ 'address': '" + search.Address + "' }, function (results, status) { \n")
                @Html.Raw("if (results != null){ \n")
                @Html.Raw("if (results.length > 0){ \n")
                @Html.Raw("var lang = results[0].geometry.location.K; \n")
                @Html.Raw("var lat = results[0].geometry.location.G; \n")
                @Html.Raw("points.push(new google.maps.LatLng(lang, lat)); \n")
                @Html.Raw("dfd.resolve(); \n");
                @Html.Raw("} else { dfd.resolve(); } \n")
                @Html.Raw("} else { dfd.resolve(); }\n")
                @Html.Raw("}); \n")
                @Html.Raw("return dfd.promise(); \n");
                @Html.Raw("} \n")
        }*@



    function getPoints() {

        var geocoder = new google.maps.Geocoder();

        @*$.when( @GetFunctions()).then(function () {
            var d = points;
            heatmap = new google.maps.visualization.HeatmapLayer({
                data: points,
                map: map
            });
        });*@



        var p = [];
        //p.push(new google.maps.LatLng(-36.85081, 174.7791616));
        //p.push(new google.maps.LatLng(-36.918121, 174.7097272));
        //p.push(new google.maps.LatLng(-41.2918005, 174.7731924));
        //p.push(new google.maps.LatLng(-36.8496572, 174.7601028));
        //p.push(new google.maps.LatLng(-36.8413334, 174.7587009));
        //p.push(new google.maps.LatLng(-41.283603, 174.777374));
        //p.push(new google.maps.LatLng(-36.850587, 174.7391746));
        //p.push(new google.maps.LatLng(-36.8459377, 174.7688944));
        //p.push(new google.maps.LatLng(-36.8537114, 174.7636556));
        ////p.push(new google.maps.LatLng(-36.8510955, 174.765303));
        //p.push(new google.maps.LatLng(-41.2992795, 174.7812721));

        @foreach (parkSmartly.Data.Model.Search search in Model)
        {
            if (!string.IsNullOrEmpty(search.lat) && !string.IsNullOrEmpty(search.lng)) { 
                @Html.Raw("p.push(new google.maps.LatLng(" + search.lat + ", " + search.lng + ")); \n")
            }
        }

        heatmap = new google.maps.visualization.HeatmapLayer({
            data: p,
            map: map
        });
        heatmap.set('radius', heatmap.get('radius') ? null : 70);
        heatmap.set('opacity', heatmap.get('opacity') ? null : 0.5);
        @*@foreach (parkSmartly.Data.Model.Search search in Model)
            {
                @Html.Raw("geocoder.geocode({ 'address': '" + search.Address + "' }, function (results, status) { \n")
                @Html.Raw("if (results != null){ \n")
                @Html.Raw("if (results.length > 0){ \n")
                @Html.Raw("var lang = results[0].geometry.location.G; \n")
                @Html.Raw("var lat = results[0].geometry.location.K; \n")
                @Html.Raw("points.push(new google.maps.LatLng(lang, lat)); \n")
                @Html.Raw("} \n")
                @Html.Raw("} \n")
                @Html.Raw("}); \n")
            }*@


        //return [
        //  new google.maps.LatLng(37.782551, -122.445368),
        //  new google.maps.LatLng(37.782745, -122.444586)
        //];
    }




    var placeSearch, autocomplete;
    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            (document.getElementById('txtAddress')),
            { types: ['geocode'] });

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
    }

    // [START region_fillform]
    function fillInAddress() {
        // Get the place details from the autocomplete object.

        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({ 'address': 'Wyndham Street, Auckland, New Zealand' }, function (results, status) {
            var f = results;
        });
        var place = autocomplete.getPlace();

        //map.setCenter(new google.maps.LatLng(place.geometry.location.G, place.geometry.location.K));
        if (place == undefined || place == null) {
            return null;
        }
        else {
            return ({ lat: place.geometry.location.G, lng: place.geometry.location.K });
        }


        for (var component in componentForm) {
            document.getElementById(component).value = '';
            document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
            var addressType = place.address_components[i].types[0];
            if (componentForm[addressType]) {
                var val = place.address_components[i][componentForm[addressType]];
                document.getElementById(addressType).value = val;
            }
        }


    }
    // [END region_fillform]

    // [START region_geolocation]
    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle({
                    center: geolocation,
                    radius: position.coords.accuracy
                });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }
    // [END region_geolocation]



</script>
}

